// <auto-generated />
using System;
using Course.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Course.Infrastructure.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20250810010756_initial-DB")]
    partial class initialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Course.Domain.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_Answers_QuestionId");

                    b.HasIndex("QuestionId", "IsCorrect")
                        .HasDatabaseName("IX_Answers_Question_IsCorrect");

                    b.HasIndex("QuestionId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_Answers_Question_Order");

                    b.ToTable("Answers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Answers_Order_Positive", "[Order] > 0");
                        });
                });

            modelBuilder.Entity("Course.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BaseCategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5a3c6b0-9cbf-49b7-9c84-75385d694eac"),
                            Name = "Programming & Development"
                        },
                        new
                        {
                            Id = new Guid("c9c068fb-2a9c-4488-b4b5-1004e9c4a801"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("1ab2568e-5c0f-409e-b762-3e3e0fc2b1e3"),
                            Name = "Design"
                        },
                        new
                        {
                            Id = new Guid("a4adafd3-9899-43fb-b326-8bc2d041335a"),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("1fdcd95f-24b8-419e-9a16-bf8bef7af3d3"),
                            BaseCategoryId = new Guid("b5a3c6b0-9cbf-49b7-9c84-75385d694eac"),
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("e9e34b50-1baa-46b2-9fb5-04c6090abb08"),
                            BaseCategoryId = new Guid("b5a3c6b0-9cbf-49b7-9c84-75385d694eac"),
                            Name = "Mobile Development"
                        },
                        new
                        {
                            Id = new Guid("a4e55167-a17f-46c4-87d8-f40e1cedd130"),
                            BaseCategoryId = new Guid("b5a3c6b0-9cbf-49b7-9c84-75385d694eac"),
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = new Guid("8b20252d-936f-4136-9c12-bb1932d802d1"),
                            BaseCategoryId = new Guid("c9c068fb-2a9c-4488-b4b5-1004e9c4a801"),
                            Name = "Management"
                        },
                        new
                        {
                            Id = new Guid("bc108ec8-8885-4d9c-a544-fb8f6b12e064"),
                            BaseCategoryId = new Guid("c9c068fb-2a9c-4488-b4b5-1004e9c4a801"),
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Course.Domain.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("English");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Courses_CategoryId");

                    b.HasIndex("CourseLevel")
                        .HasDatabaseName("IX_Courses_Level");

                    b.HasIndex("CourseStatus")
                        .HasDatabaseName("IX_Courses_Status");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Courses_CreatedAt");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("IX_Courses_InstructorId");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_Courses_Price");

                    b.HasIndex("InstructorId", "CourseStatus")
                        .HasDatabaseName("IX_Courses_Instructor_Status");

                    b.HasIndex("CategoryId", "CourseStatus", "CourseLevel")
                        .HasDatabaseName("IX_Courses_Category_Status_Level");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("Course.Domain.Models.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("IX_Lectures_SectionId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Lectures_Title");

                    b.ToTable("Lectures", (string)null);
                });

            modelBuilder.Entity("Course.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionType")
                        .HasDatabaseName("IX_Questions_QuestionType");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_Questions_QuizId");

                    b.HasIndex("QuizId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_Questions_Quiz_Order");

                    b.ToTable("Questions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Questions_Marks_Positive", "[Marks] > 0");

                            t.HasCheckConstraint("CK_Questions_Order_Positive", "[Order] > 0");
                        });
                });

            modelBuilder.Entity("Course.Domain.Models.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PassingMarks")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Quizzes_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Quizzes_CreatedBy");

                    b.HasIndex("LectureId")
                        .HasDatabaseName("IX_Quizzes_LectureId");

                    b.ToTable("Quizzes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Quizzes_PassingMarks_Valid", "[PassingMarks] > 0 AND [PassingMarks] <= [TotalMarks]");

                            t.HasCheckConstraint("CK_Quizzes_TimeLimit_Positive", "[TimeLimitInMinutes] IS NULL OR [TimeLimitInMinutes] > 0");

                            t.HasCheckConstraint("CK_Quizzes_TotalMarks_Positive", "[TotalMarks] > 0");
                        });
                });

            modelBuilder.Entity("Course.Domain.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("ParentReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Reviews_CourseId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Reviews_CreatedAt");

                    b.HasIndex("ParentReviewId")
                        .HasDatabaseName("IX_Reviews_ParentReviewId");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_Reviews_Rating");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reviews_UserId");

                    b.HasIndex("CourseId", "Rating")
                        .HasDatabaseName("IX_Reviews_Course_Rating");

                    b.HasIndex("UserId", "CourseId")
                        .HasDatabaseName("IX_Reviews_User_Course");

                    b.ToTable("Reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reviews_Rating_Range", "[Rating] >= 1 AND [Rating] <= 5");
                        });
                });

            modelBuilder.Entity("Course.Domain.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Sections_CourseId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Sections_Title");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("Course.Domain.Models.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedAnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("IsCorrect")
                        .HasDatabaseName("IX_StudentAnswers_IsCorrect");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_StudentAnswers_QuestionId");

                    b.HasIndex("SelectedAnswerID")
                        .HasDatabaseName("IX_StudentAnswers_SelectedAnswerID");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("IX_StudentAnswers_StudentId");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("IX_StudentAnswers_SubmittedAt");

                    b.HasIndex("StudentId", "QuestionId")
                        .IsUnique()
                        .HasDatabaseName("IX_StudentAnswers_Student_Question");

                    b.ToTable("StudentAnswers", (string)null);
                });

            modelBuilder.Entity("Course.Domain.Models.Answer", b =>
                {
                    b.HasOne("Course.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Course.Domain.Models.Category", b =>
                {
                    b.HasOne("Course.Domain.Models.Category", "BaseCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("BaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseCategory");
                });

            modelBuilder.Entity("Course.Domain.Models.Course", b =>
                {
                    b.HasOne("Course.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Course.Domain.Models.Lecture", b =>
                {
                    b.HasOne("Course.Domain.Models.Section", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Lectures_Sections");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Course.Domain.Models.Question", b =>
                {
                    b.HasOne("Course.Domain.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Questions_Quizzes");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Course.Domain.Models.Quiz", b =>
                {
                    b.HasOne("Course.Domain.Models.Lecture", "Lecture")
                        .WithMany("Quizzes")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Quizzes_Lectures");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Course.Domain.Models.Review", b =>
                {
                    b.HasOne("Course.Domain.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Courses");

                    b.HasOne("Course.Domain.Models.Review", "ParentReview")
                        .WithMany("Replies")
                        .HasForeignKey("ParentReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Reviews_ParentReviews");

                    b.Navigation("Course");

                    b.Navigation("ParentReview");
                });

            modelBuilder.Entity("Course.Domain.Models.Section", b =>
                {
                    b.HasOne("Course.Domain.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sections_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Course.Domain.Models.StudentAnswer", b =>
                {
                    b.HasOne("Course.Domain.Models.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_Questions");

                    b.HasOne("Course.Domain.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("SelectedAnswerID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StudentAnswers_Answers");

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Course.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Course.Domain.Models.Course", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Course.Domain.Models.Lecture", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Course.Domain.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("Course.Domain.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Course.Domain.Models.Review", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Course.Domain.Models.Section", b =>
                {
                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
